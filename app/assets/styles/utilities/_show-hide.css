/* ==========================================================================
   #HIDE
   ========================================================================== */

/**
 * Hide only visually, but have it available for screen readers:
 * http://snook.ca/archives/html_and_css/hiding-content-for-accessibility
 */

.u-hidden-visually {
  @include inuit-hidden-visually();
}


/**
 * Hide visually and from screen readers.
 */

.u-hidden {
  display: none !important;
}


.display-none {
	display: none;

	&--atSmall {
		display: none;

		@mixin at Small {
			display: block;
		}
	}

	&--atMedium {
		display: none;

		@mixin at Medium {
			display: block;
		}
	}
  
	&--atLarge {
		display: none;
    
		@mixin at Large {
			display: block;
		}
	}
}


/*
* Hide visually and from screen readers, but maintain layout
*/

.invisible {
  visibility: hidden;
}


/*
* Hide only visually, but have it available for screen readers:
* https://snook.ca/archives/html_and_css/hiding-content-for-accessibility
*
* 1. For long content, line feeds are not interpreted as spaces and small width
*    causes content to wrap 1 word per line:
*    https://medium.com/@jessebeach/beware-smushed-off-screen-accessible-text-5952a4c2cbfe
*/

.u-sr-only {
  border: 0;
  clip: rect(0, 0, 0, 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  white-space: nowrap;
  width: 1px;
  /* 1 */
}

/*
* Extends the .sr-only class to allow the element
* to be focusable when navigated to via the keyboard:
* https://www.drupal.org/node/897638
*/

.u-sr-only.focusable:active,
.u-sr-only.focusable:focus {
  clip: auto;
  height: auto;
  margin: 0;
  overflow: visible;
  position: static;
  white-space: inherit;
  width: auto;
}


/* ==========================================================================
   #SHOW
   ========================================================================== */


.u-show {
  display: block !important;
}


/* 

When an element has a hidden attribute, they should be hidden
from view. Normalize.css does this for us already.

The problem with this style is its low specificity.

I often add hidden to other elements I style with a
class. A class’s specificity is high than an attribute
, and the display: none property doesn’t work.

This is why I opt to bump up [hidden]'s 
specificity with !important. 

*/

[hidden] {
	display: none !important;
}

/* Hide element while making it readable for screen readers
  https://github.com/h5bp/html5-boilerplate/blob/master/src/css/main.css#L119-L133
*/

.u-visually-hidden {
	position: absolute;
	overflow: hidden;
	clip: rect(0 0 0 0);
	height: 1px;
	width: 1px;
	margin: -1px;
	padding: 0;
	border: 0;
}
